{
  "results": {
    "CNTR_1740787713_1760756870012": {
      "testId": "CNTR_1740787713_1760756870012",
      "timestamp": "2025-10-18T03:07:50.012Z",
      "query": "escalation for Duplicate container snapshot detected: Data quality monitor detected that container CMAU0000020 was inserted twice within one second, creating inconsistent yard inventory views.",
      "aiResponse": "Subject: Escalation: ALR-861600 - Duplicate Container Snapshot (CMAU0000020)\n\nLeadership,\n\nIncident ALR-861600 reports a duplicate snapshot for container CMAU",
      "module": "CNTR",
      "expectedOutcome": null,
      "results": {
        "procedureCompliance": {
          "score": 70,
          "issues": [
            "Missing required step: validate container status",
            "Missing required step: check location data",
            "Missing required step: verify ownership"
          ],
          "category": "procedure_compliance"
        },
        "accuracyCheck": {
          "score": 85,
          "issues": [
            "Missing container status check"
          ],
          "category": "accuracy"
        },
        "safetyValidation": {
          "score": 50,
          "issues": [
            "Missing safety consideration: proper documentation",
            "Missing safety consideration: verification steps"
          ],
          "category": "safety"
        },
        "completenessCheck": {
          "score": 100,
          "issues": [],
          "category": "completeness"
        },
        "clarityScore": {
          "score": 100,
          "issues": [],
          "category": "clarity"
        }
      },
      "overallScore": 81,
      "passed": true
    },
    "CNTR_1336769417_1760759682779": {
      "testId": "CNTR_1336769417_1760759682779",
      "timestamp": "2025-10-18T03:54:42.779Z",
      "query": "playbook for Duplicate container snapshot detected: Data quality monitor detected that container CMAU0000020 was inserted twice within one second, creating inconsistent yard inventory views.",
      "aiResponse": "Portwarden AI Playbook: ALR-861600 - Duplicate Container Snapshot Detected\n\n**Incident:** ALR-861600 - Duplicate container snapshot detected (Medium)\n**Container ID:** CMAU0000020\n**Summary:** Data quality monitor detected that container CMAU0000020 was inserted twice within one second, creating inconsistent yard inventory views.\n**Reference:** [KB-2210] CNTR: Duplicate Container information received\n\n---\n\n**Objective:** Resolve duplicate container snapshot for CMAU0000020, ensure data consistency, and restore accurate inventory views.\n\n**Action Steps:**\n\n1.  **Acknowledge and Review Incident Details**\n    *   Confirm the alert details match the provided context.\n    *   Review `container_service.log` for the `WARN container-version DuplicateSnapshotAttempt cntr_no=CMAU0000020` entry to confirm the exact timestamp and context of the duplication event.\n\n2.  **Detect Duplicate Snapshots (Initial Verification)**\n    *   Query the `container` database table to identify all entries for `CMAU0000020`, specifically looking for multiple records with identical or near-identical timestamps that indicate a duplicate snapshot. This aligns with [KB-2210] Action 1.\n\n    ```sql\n    SQL Query: Retrieve Duplicate Candidates\n    SELECT\n        id,\n        cntr_no,\n        location,\n        status,\n        snapshot_timestamp,\n        created_at\n    FROM\n        container_snapshots\n    WHERE\n        cntr_no = 'CMAU0000020'\n    ORDER BY\n        snapshot_timestamp DESC, created_at DESC;\n    ```\n    *   **Verification:** Confirm that multiple rows exist for `CMAU0000020` with very close `snapshot_timestamp` values, as indicated by the alert. Identify the primary key (`id`) for all duplicate entries.\n\n3.  **Retain Most Recent Snapshot Only**\n    *   Identify the single most recent and correct snapshot for `CMAU0000020` based on `snapshot_timestamp` and `created_at`. All other duplicate entries for this container must be archived or removed. This aligns with [KB-2210] Action 2.\n    *   **Safety Precaution:** Before proceeding, perform a backup of the affected rows or the entire `container_snapshots` table if policy dictates.\n\n    ```sql\n    SQL Query: Identify and Archive/Delete Duplicate Rows (Example - Adapt to your archiving policy)\n    -- Step 3a: Identify the ID of the most recent valid snapshot\n    SELECT id INTO @latest_id\n    FROM container_snapshots\n    WHERE cntr_no = 'CMAU0000020'\n    ORDER BY snapshot_timestamp DESC, created_at DESC\n    LIMIT 1;\n\n    -- Step 3b: Archive/Delete all other snapshots for CMAU0000020\n    -- OPTION A: Archive to a history table (Recommended for auditability)\n    INSERT INTO container_snapshots_history\n    SELECT *\n    FROM container_snapshots\n    WHERE cntr_no = 'CMAU0000020' AND id != @latest_id;\n\n    -- OPTION B: Delete directly (Use with extreme caution and only if archiving is not an option)\n    DELETE FROM container_snapshots\n    WHERE cntr_no = 'CMAU0000020' AND id != @latest_id;\n    ```\n    *   **Verification:** Execute the initial `SELECT` query from Step 2 again. Confirm that only one row for `CMAU0000020` remains in the `container_snapshots` table, and it is the intended most recent snapshot.\n\n4.  **Rebuild Cache Consumers**\n    *   Trigger a refresh or rebuild of the relevant cache consumers that rely on container snapshot data. This ensures downstream systems and APIs receive the corrected, single snapshot for `CMAU0000020`. This aligns with [KB-2210] Action 3.\n\n    ```api\n    API Call: Trigger Cache Refresh (Example - Adjust endpoint and payload as per system design)\n    POST /api/v1/cache/rebuild\n    Headers:\n        Content-Type: application/json\n        Authorization: Bearer <YOUR_AUTH_TOKEN>\n    Body:\n        {\n            \"module\": \"container_snapshots\",\n            \"entity_id\": \"CMAU0000020\",\n            \"force_refresh\": true\n        }\n    ```\n    *   **Verification:**\n        *   Monitor the API response for success (e.g., HTTP 200 OK).\n        *   Check `cache_service.log` or similar logs for confirmation that the cache rebuild for `CMAU0000020` was initiated and completed successfully.\n        *   If possible, verify data consistency in a downstream system or API endpoint that consumes this data (e.g., query the yard management system's API for `CMAU0000020` to ensure it shows the correct, single location/status).\n\n---\n\n**Ready to Close Checklist:**\n\n*   [ ] Confirmed duplicate snapshots were identified in the database.\n*   [ ] Successfully retained only the most recent, valid snapshot for `CMAU0000020`.\n*   [ ] Verified that only one record for `CMAU0000020` exists in the `container_snapshots` table.\n*   [ ] Triggered and confirmed successful cache rebuild/refresh for container data.\n*   [ ] Verified (if possible) that downstream systems reflect the corrected container data.\n*   [ ] Incident log updated with resolution steps and verification outcomes.",
      "module": "CNTR",
      "expectedOutcome": null,
      "results": {
        "procedureCompliance": {
          "score": 70,
          "issues": [
            "Missing required step: validate container status",
            "Missing required step: check location data",
            "Missing required step: verify ownership"
          ],
          "category": "procedure_compliance"
        },
        "accuracyCheck": {
          "score": 85,
          "issues": [
            "Missing container status check"
          ],
          "category": "accuracy"
        },
        "safetyValidation": {
          "score": 75,
          "issues": [
            "Missing safety consideration: proper documentation"
          ],
          "category": "safety"
        },
        "completenessCheck": {
          "score": 100,
          "issues": [],
          "category": "completeness"
        },
        "clarityScore": {
          "score": 100,
          "issues": [],
          "category": "clarity"
        }
      },
      "overallScore": 86,
      "passed": true
    },
    "CNTR_1336769417_1760803516627": {
      "testId": "CNTR_1336769417_1760803516627",
      "timestamp": "2025-10-18T16:05:16.628Z",
      "query": "playbook for Duplicate container snapshot detected: Data quality monitor detected that container CMAU0000020 was inserted twice within one second, creating inconsistent yard inventory views.",
      "aiResponse": "Playbook: ALR-861600 — Duplicate container snapshot detected (CMAU0000020)\nReference: KB-2210 (CNTR-024) — \"Duplicate Container information received\"\n\nPurpose: Detect and remediate duplicate container snapshot rows for cntr_no=CMAU0000020, preserve latest operational snapshot, archive older duplicates, and force downstream consumers to pick up corrected state. No escalation required.\n\nKey safety notes:\n- Take backups and operate in a transaction. Do not delete without archiving.\n- Coordinate a short maintenance window or quiesce upstream writers if possible to prevent further duplicate writes while remediation executes.\n- Preserve logs and export duplicates for audit.\n\nStep-by-step actions (numbered; each step includes verification)\n\n1) Action 1 — Evidence capture & initial assessment\n   - Label: Capture evidence, note timestamps and counts.\n   - Actions:\n     a) Export the relevant log lines and DB rows for CMAU0000020 to an evidence file.\n     b) Record the exact counts of duplicate rows and their timestamps.\n   - Commands (examples):\n```sql\n-- type: sql\n-- Export current rows for CMAU0000020 to an audit table/file (run on a copy or read-only replica if available)\nSELECT id, cntr_no, snapshot_ts, payload, created_at\nFROM container\nWHERE cntr_no = 'CMAU0000020'\nORDER BY snapshot_ts DESC;\n```\n   - Verification:\n     - Confirm you have N>1 rows returned (evidence of duplicates).\n     - Save output to evidence location (e.g., /var/ops/evidence/ALR-861600-cma u0000020.csv).\n\n   - KB: See KB-2210 for expected duplicate patterns and fields to capture.\n\n2) Action 2 — Coordinate/Quiesce writers (Operational safety)\n   - Label: Prevent concurrent writes\n   - Actions:\n     - Notify upstream systems owners (ingest API / container producer) and place a short hold or enable maintenance mode for the container snapshot feed, if possible (expected hold: 2–10 minutes).\n   - Verification:\n     - Confirm no new DuplicateSnapshotAttempt warnings are generated while working by tailing logs:\n       - Monitor container_service.log for DuplicateSnapshotAttempt messages:\n         - Example: tail -F /var/log/container_service.log | grep --line-buffered DuplicateSnapshotAttempt\n     - KB: KB-2210 recommends minimizing concurrent writes during remediation.\n\n3) Action 3 — Full backup / snapshot of relevant tables\n   - Label: Backup\n   - Actions:\n     - Take a consistent backup or snapshot of the database (or at minimum the container table and related indexes).\n   - Verification:\n     - Confirm backup/snapshot exists and is restorable (record backup id and location).\n\n4) Action 4 — Detect duplicates definitively (read-only confirmation)\n   - Label: Detect duplicates\n   - Actions:\n     - Run query to list duplicates by cntr_no with exact timestamps and row ids.\n```sql\n-- type: sql\n-- Find duplicates for this container and show ordering\nSELECT id, cntr_no, snapshot_ts, payload, created_at\nFROM container\nWHERE cntr_no = 'CMAU0000020'\nORDER BY snapshot_ts DESC, created_at DESC;\n```\n   - Verification:\n     - Confirm there are multiple rows, and identify which row has the most recent snapshot_ts / created_at (this will be the row to retain).\n     - Note IDs of older rows to archive (e.g., id IN (101,102)).\n\n5) Action 5 — Archive older duplicate rows (retain most recent)\n   - Label: Archive old snapshots (preserve audit)\n   - High-level: Insert older duplicate rows into container_archive (or container_audit) and then delete them from live table inside a transaction.\n   - Actions:\n     a) Create archive table if not present (preserve original schema + metadata).\n     b) Insert older rows into archive with an archive_ts and reason.\n     c) Delete older rows from live table.\n```sql\n-- type: sql\n-- (1) Ensure archive table exists (run once)\nCREATE TABLE IF NOT EXISTS container_archive AS TABLE container WITH NO DATA;\n\n-- (optional) Add archive metadata columns if not present\nALTER TABLE container_archive\n  ADD COLUMN IF NOT EXISTS archive_ts timestamptz,\n  ADD COLUMN IF NOT EXISTS archive_reason text;\n\n-- type: sql\n-- (2) In a transaction: archive older rows and remove from live\nBEGIN;\n\n-- Identify the latest row id to keep\nWITH ranked AS (\n  SELECT id, cntr_no, snapshot_ts, created_at,\n         ROW_NUMBER() OVER (PARTITION BY cntr_no ORDER BY snapshot_ts DESC, created_at DESC) AS rn\n  FROM container\n  WHERE cntr_no = 'CMAU0000020'\n)\n-- Insert rows where rn > 1 into archive\nINSERT INTO container_archive (id, cntr_no, snapshot_ts, payload, created_at, archive_ts, archive_reason)\nSELECT id, cntr_no, snapshot_ts, payload, created_at, NOW(), 'Duplicate snapshot archive (ALR-861600)'\nFROM ranked\nWHERE rn > 1;\n\n-- Delete the archived rows from live table\nDELETE FROM container\nWHERE id IN (SELECT id FROM ranked WHERE rn > 1);\n\nCOMMIT;\n```\n   - Verification:\n     - Query the live table to ensure only one row remains:\n```sql\n-- type: sql\nSELECT COUNT(*) AS live_count, MIN(snapshot_ts) AS min_ts, MAX(snapshot_ts) AS max_ts\nFROM container\nWHERE cntr_no = 'CMAU0000020';\n```\n     - Expected: live_count = 1, and snapshot_ts = the most recent value identified previously.\n     - Confirm archive rows exist with an archive_reason and archive_ts:\n```sql\n-- type: sql\nSELECT COUNT(*) AS archived_count FROM container_archive WHERE cntr_no='CMAU0000020';\n```\n\n6) Action 6 — Sanity-check payload & integrity\n   - Label: Validate retained snapshot\n   - Actions:\n     - Examine payload and schema fields for the retained snapshot to ensure it is complete and consistent.\n     - If payload contains sequence or version fields, confirm it is the highest/latest version.\n   - Verification:\n     - Compare retained snapshot payload to recent API response or other authoritative source (if available).\n\n7) Action 7 — Rebuild cache consumers / downstream sync (KB-2210)\n   - Label: Rebuild cache / force downstream sync\n   - Actions:\n     - Trigger downstream sync or cache invalidation so API consumers pick up corrected state (per KB-2210).\n     - Example API calls: invalidate cache endpoint or publish change event to message bus.\n```api\n-- type: api\n# Example: call internal cache-invalidate endpoint for this container\nPOST /internal/cache/invalidate\nHost: internal-api.example.local\nContent-Type: application/json\n\n{\n  \"entity\": \"container\",\n  \"cntr_no\": \"CMAU0000020\",\n  \"reason\": \"Duplicate snapshot remediation ALR-861600\"\n}\n```\n   - If using message bus, publish a change event:\n```api\n-- type: api\n# Example: POST to internal event producer\nPOST /internal/events/publish\nHost: events-producer.internal\nContent-Type: application/json\n\n{\n  \"topic\": \"container.upsert\",\n  \"payload\": {\n    \"cntr_no\": \"CMAU0000020\",\n    \"action\": \"sync\",\n    \"source\": \"ALR-861600-remediation\"\n  }\n}\n```\n   - Verification:\n     - Check cache/invalidator response code (200 OK) and returned status.\n     - Confirm consumer APIs now return the retained snapshot for CMAU0000020:\n```sql\n-- type: sql\nSELECT id, cntr_no, snapshot_ts, payload\nFROM container\nWHERE cntr_no = 'CMAU0000020';\n```\n     - Verify API consumer endpoint returns same snapshot (example curl):\n```api\n-- type: api\nGET /api/containers/CMAU0000020\nHost: api.example.com\n```\n     - Expected: API returns the retained snapshot timestamp/payload.\n\n8) Action 8 — Log verification & monitoring\n   - Label: Confirm no recurrence\n   - Actions:\n     - Monitor container_service.log for occurrences of DuplicateSnapshotAttempt for at least the agreed observation window (recommend 24 hours).\n     - Check audit logs for any other duplicate insert attempts.\n   - Example log checks:\n     - Grep for the warning:\n       - grep \"DuplicateSnapshotAttempt .* cntr_no=CMAU0000020\" /var/log/container_service.log\n     - Tail and monitor for 24 hours; consider alert suppression only while monitoring remediation.\n   - Verification:\n     - No new DuplicateSnapshotAttempt entries for CMAU0000020 after remediation (for the observation window).\n     - No other containers show similar duplicate pattern (run a broader query if desired).\n\n9) Action 9 — Document remediation & root-cause notes\n   - Label: Documentation & follow-up\n   - Actions:\n     - Record remediation steps taken, timestamps, backup id, archive table entries, and evidence files.\n     - Add entry to incident tracker: ALR-861600, include KB-2210 reference and attach exports.\n     - Recommend follow-up: investigate upstream producer timing resolution to avoid near-simultaneous inserts (see KB-2210 for guidance).\n   - Verification:\n     - Confirm incident record contains links to evidence, SQL executed, and archive entries.\n\n10) Action 10 — Ready to close checklist\n   - Label: Ready to close\n   - Checklist items (all must be ticked before closing):\n     1. [ ] Evidence exported and stored (logs and DB rows) — file path recorded.\n     2. [ ] Database backup/snapshot created before changes — backup ID recorded.\n     3. [ ] Older duplicate rows archived into container_archive with archive_reason and archive_ts — verify archive count.\n     4. [ ] Live container table contains exactly one snapshot row for CMAU0000020 — verified by query.\n     5. [ ] Downstream caches invalidated / consumers resynced — API response verified.\n     6. [ ] No DuplicateSnapshotAttempt warnings for CMAU0000020 observed during observation window (recommended 24h) — monitoring log output captured.\n     7. [ ] Incident documented with KB-2210 referenced and remediation steps attached.\n     8. [ ] Stakeholders (ingest owner / API owner) notified and confirmation received (if required).\n   - Final verification before close:\n     - Show the final DB check output (example):\n```sql\n-- type: sql\nSELECT COUNT(*) AS live_count, MAX(snapshot_ts) AS current_snapshot_ts\nFROM container\nWHERE cntr_no = 'CMAU0000020';\n```\n     - Expected: live_count = 1.\n\nNotes / Additional guidance\n- Per KB-2210: prefer archiving over hard delete to preserve audit trail and to match retention policies.\n- If duplicates are frequent/systemic, open a follow-up task to throttle or deduplicate upstream producers using idempotency keys or sequence/version checks.\n- Keep the archived rows for the duration mandated by policy; mark archive_reason clearly as \"ALR-861600 duplicate snapshot archive\".\n\nExample quick verification commands summary (run after remediation)\n- Confirm live single row:\n```sql\n-- type: sql\nSELECT id, cntr_no, snapshot_ts, created_at FROM container WHERE cntr_no='CMAU0000020';\n```\n- Confirm archived rows:\n```sql\n-- type: sql\nSELECT id, archive_ts, archive_reason FROM container_archive WHERE cntr_no='CMAU0000020';\n```\n- Confirm no recent log warnings:\n  - tail -n 200 /var/log/container_service.log | grep DuplicateSnapshotAttempt | grep CMAU0000020\n\nKB Reference: KB-2210 (CNTR-024) — follow the duplicate snapshot detection and archive-first remediation steps described therein.\n\nIf you want, I can generate the exact SQL used (with ids replaced by the actual ids returned by the detect query) and an ops-ready runbook snippet to paste into the maintenance window ticket.",
      "module": "CNTR",
      "expectedOutcome": null,
      "results": {
        "procedureCompliance": {
          "score": 70,
          "issues": [
            "Missing required step: validate container status",
            "Missing required step: check location data",
            "Missing required step: verify ownership"
          ],
          "category": "procedure_compliance"
        },
        "accuracyCheck": {
          "score": 85,
          "issues": [
            "Missing container status check"
          ],
          "category": "accuracy"
        },
        "safetyValidation": {
          "score": 100,
          "issues": [],
          "category": "safety"
        },
        "completenessCheck": {
          "score": 100,
          "issues": [],
          "category": "completeness"
        },
        "clarityScore": {
          "score": 100,
          "issues": [],
          "category": "clarity"
        }
      },
      "overallScore": 91,
      "passed": true
    },
    "CNTR_1336769417_1760803543620": {
      "testId": "CNTR_1336769417_1760803543620",
      "timestamp": "2025-10-18T16:05:43.620Z",
      "query": "playbook for Duplicate container snapshot detected: Data quality monitor detected that container CMAU0000020 was inserted twice within one second, creating inconsistent yard inventory views.",
      "aiResponse": "Incident: ALR-861600 — Duplicate container snapshot detected for CMAU0000020 (Medium)\nRole: Yard Duty Officer\nReference: [KB-2210] CNTR-024 Duplicate Container information received\n\nSummary:\nData monitor reported two snapshots for container CMAU0000020 inserted within one second producing inconsistent yard inventory. No escalation required. Follow the steps below to detect, contain, correct, and verify. Each step includes verification checks. Preserve operational safety — perform DB writes during a low-activity window and take a DB backup before making changes.\n\nAction steps (numbered with labels)\n\n1) PREPARE — Take backup & gather evidence\n   - Label: PREP-01\n   - Purpose: Preserve state before any modification; collect evidence for audit and rollback.\n   - Actions:\n     a) Take a logical backup (or DB snapshot) of the container table and related indexes.\n     b) Export the two duplicate rows and container_service.log lines that show DuplicateSnapshotAttempt.\n   - Commands (SQL):\n     (SQL)\n     ```\n     -- create a quick logical backup of the relevant rows\n     SELECT * INTO container_backup_ALR861600\n     FROM container\n     WHERE cntr_no = 'CMAU0000020';\n\n     -- export any related rows that may reference this container (optional)\n     SELECT * INTO container_links_backup_ALR861600\n     FROM container_links\n     WHERE cntr_no = 'CMAU0000020';\n     ```\n   - Verification:\n     - Confirm container_backup_ALR861600 contains the duplicate rows.\n     - Save a copy of container_service.log lines showing \"DuplicateSnapshotAttempt cntr_no=CMAU0000020\" to the incident record.\n\n2) DETECT — Confirm duplicates exist and identify latest snapshot\n   - Label: DETECT-01\n   - Purpose: Verify duplicates and determine which row is the most recent operational state per KB guidance.\n   - Actions:\n     a) Query the DB for all rows with cntr_no CMAU0000020 and list ordering by timestamp/version.\n   - Commands (SQL):\n     (SQL)\n     ```\n     -- list all container snapshots for inspect\n     SELECT id, cntr_no, snapshot_ts, version, created_at, updated_at, payload\n     FROM container\n     WHERE cntr_no = 'CMAU0000020'\n     ORDER BY snapshot_ts DESC, updated_at DESC;\n     \n     -- detect potential duplicates within 1s across the full table (optional)\n     SELECT cntr_no, snapshot_ts, COUNT(*) AS dup_count\n     FROM container\n     WHERE cntr_no = 'CMAU0000020'\n     GROUP BY cntr_no, snapshot_ts\n     HAVING COUNT(*) > 1;\n     ```\n   - Verification:\n     - Confirm query returns two (or >1) rows with same or near-identical snapshot_ts.\n     - Note the id (primary key) of the row that should be kept (typically the top row = most recent by snapshot_ts/updated_at/version). Record that id in the incident notes.\n\n   - KB reference: [KB-2210] step 1 Detect duplicate snapshots.\n\n3) SAFE LOCK — Obtain transactional lock & re-check (prevent concurrent writes)\n   - Label: LOCK-01\n   - Purpose: Prevent concurrent snapshot writes during correction.\n   - Actions:\n     a) Start a DB transaction and lock the target rows (SELECT ... FOR UPDATE).\n   - Commands (SQL):\n     (SQL)\n     ```\n     BEGIN TRANSACTION;\n\n     -- lock all rows for this container to prevent concurrent writes\n     SELECT id, cntr_no, snapshot_ts, version\n     FROM container\n     WHERE cntr_no = 'CMAU0000020'\n     FOR UPDATE;\n     ```\n   - Verification:\n     - Transaction started and SELECT FOR UPDATE returns expected rows. Do not commit/rollback yet.\n\n4) ARCHIVE OLD SNAPSHOTS — Retain most recent snapshot; archive older duplicates\n   - Label: ARCHIVE-01\n   - Purpose: Preserve older snapshots in an archive table and keep only the most recent operational row in the live table as per KB.\n   - Actions:\n     a) Identify latest row id (from step 2).\n     b) Insert older rows into container_archive, then delete them from container.\n   - Commands (SQL):\n     (SQL)\n     ```\n     -- assume latest_id obtained previously, e.g., 12345\n     -- ARCHIVE older rows\n     INSERT INTO container_archive\n     SELECT *, current_timestamp AS archived_at\n     FROM container\n     WHERE cntr_no = 'CMAU0000020'\n       AND id <> <latest_id>;\n\n     -- confirm rows inserted into archive\n     SELECT COUNT(*) FROM container_archive WHERE cntr_no = 'CMAU0000020' AND archived_at IS NOT NULL;\n\n     -- delete the older rows from live table\n     DELETE FROM container\n     WHERE cntr_no = 'CMAU0000020'\n       AND id <> <latest_id>;\n     ```\n   - Note: Replace <latest_id> with actual id from DETECT-01.\n   - Verification:\n     - After INSERT check container_archive contains the older row(s).\n     - After DELETE, confirm only one row remains in container for CMAU0000020:\n       (SQL)\n       ```\n       SELECT COUNT(*) as live_count FROM container WHERE cntr_no = 'CMAU0000020';\n       ```\n       Expect live_count = 1.\n     - Check that payload/version on the retained row matches the most recent snapshot from step 2.\n\n5) COMMIT & RELEASE LOCK\n   - Label: COMMIT-01\n   - Purpose: Finalize change and release DB locks.\n   - Actions:\n     a) Commit the transaction if all archive/delete verifications pass; otherwise ROLLBACK and escalate.\n   - Commands (SQL):\n     (SQL)\n     ```\n     COMMIT;\n     ```\n   - Verification:\n     - Confirm transaction committed and no outstanding locks for cntr_no CMAU0000020.\n     - Optionally run the DETECT query again outside any transaction:\n       (SQL)\n       ```\n       SELECT id, cntr_no, snapshot_ts, version FROM container WHERE cntr_no = 'CMAU0000020';\n       ```\n\n6) TRIGGER DOWNSTREAM SYNC / CACHE REBUILD\n   - Label: SYNC-01\n   - Purpose: Ensure downstream cache/API consumers receive corrected inventory (KB-2210 step 3).\n   - Actions:\n     a) Call the internal cache/sync API for this container or trigger a rebuild for the container caches used by yard systems.\n   - Commands (API)\n     ```\n     POST /internal/sync/container\n     Authorization: Bearer <service-token>\n     Content-Type: application/json\n\n     {\n       \"cntr_no\": \"CMAU0000020\",\n       \"reason\": \"Duplicate snapshot resolved - ALR-861600\"\n     }\n     ```\n     Example using a specific endpoint:\n     ```\n     POST /v1/cache/rebuild/container?container_no=CMAU0000020\n     Authorization: Bearer <service-token>\n     ```\n   - Verification:\n     - API returns 200/accepted and a job id. Record the job id.\n     - Poll job status endpoint if present until status=success.\n     - Confirm downstream API returns consistent single snapshot for CMAU0000020:\n       (API)\n       ```\n       GET /v1/containers/CMAU0000020\n       Authorization: Bearer <service-token>\n       ```\n       Expect response with a single current snapshot matching the retained row.\n\n   - KB reference: [KB-2210] step 3 Rebuild cache consumers.\n\n7) LOGS & MONITOR — Confirm warning no longer repeats\n   - Label: MONITOR-01\n   - Purpose: Ensure duplicate snapshot attempts have ceased and system stabilized.\n   - Actions:\n     a) Search logs for recent DuplicateSnapshotAttempt entries after remediation.\n   - Commands (SQL) and Shell suggestion:\n     (Shell)\n     ```\n     # grep recent log entries (example)\n     grep \"DuplicateSnapshotAttempt cntr_no=CMAU0000020\" /var/log/container_service.log | tail -n 50\n     ```\n   - Verification:\n     - No new DuplicateSnapshotAttempt lines for CMAU0000020 after the timestamp of commit.\n     - If new attempts appear, escalate to development team and provide archived rows and timestamps.\n\n8) DOCUMENTATION & INCIDENT NOTES\n   - Label: DOC-01\n   - Purpose: Record actions, evidence, and why older snapshots were archived.\n   - Actions:\n     a) Add the following into the incident record:\n        - Pre-change backup name (container_backup_ALR861600)\n        - IDs of archived rows and archive table references\n        - Latest retained id\n        - API job id for cache rebuild\n        - Log excerpts showing initial warning and final verification\n        - Reference KB article: [KB-2210] CNTR-024\n   - Verification:\n     - Incident record contains all items and attachments; timestamps and operator name included.\n\nReady to close checklist\n  - [ ] Pre-change backup created and stored (container_backup_ALR861600).\n  - [ ] Duplicate rows detected and latest snapshot identified (IDs recorded).\n  - [ ] Older snapshot(s) archived to container_archive and verified.\n  - [ ] Live container table contains only the intended latest snapshot (COUNT = 1).\n  - [ ] DB transaction committed and locks released.\n  - [ ] Downstream cache/APIs rebuilt; job id recorded and completed successfully.\n  - [ ] Logs rechecked: no new DuplicateSnapshotAttempt for CMAU0000020 post-fix.\n  - [ ] Incident record updated with evidence and KB reference [KB-2210] CNTR-024.\n  - [ ] Stakeholders informed (if required) and no escalation required.\n\nNotes & Safety:\n  - Always perform the DB changes inside a transaction and during low-activity windows where possible.\n  - If the duplicate snapshots represent different payload states and it's unclear which to keep, follow KB-2210 guidance: retain the most recent by snapshot_ts/version. If business rules differ, consult application owners before deletion.\n  - If this pattern repeats for other containers, open a ticket for engineering to fix the upstream snapshot deduplication logic.\n\nIf you want, I can produce the exact SQL with the real latest_id (replace placeholder) after you paste the SELECT results from step 2, or run the detection queries for all containers to see if others are affected.",
      "module": "CNTR",
      "expectedOutcome": null,
      "results": {
        "procedureCompliance": {
          "score": 70,
          "issues": [
            "Missing required step: validate container status",
            "Missing required step: check location data",
            "Missing required step: verify ownership"
          ],
          "category": "procedure_compliance"
        },
        "accuracyCheck": {
          "score": 85,
          "issues": [
            "Missing container status check"
          ],
          "category": "accuracy"
        },
        "safetyValidation": {
          "score": 100,
          "issues": [],
          "category": "safety"
        },
        "completenessCheck": {
          "score": 100,
          "issues": [],
          "category": "completeness"
        },
        "clarityScore": {
          "score": 100,
          "issues": [],
          "category": "clarity"
        }
      },
      "overallScore": 91,
      "passed": true
    }
  },
  "summary": {
    "totalTests": 4,
    "passedTests": 4,
    "failedTests": 0,
    "avgAccuracy": 87,
    "lastRun": "2025-10-18T16:05:43.625Z"
  }
}